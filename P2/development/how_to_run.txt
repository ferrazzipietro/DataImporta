CREATE DATABASE

To create the database and set up the materialized views run from postgres:
% \i create_db.sql


DATA FORMATTER

Once the DB has been created it can be populated with data prepared and cleaned in pyspark.
Two paramaters have to be given: the path to the persistent zone and specify if this path is HDFS or not
% python3 data_formatter.py db_user db_password db_name 'path_to_persistent_zone' 'data_from_HDFS_Ture_False'


VIEWS REFRESHING

At each upload, the sandbowes (i.e., the materialized views) have to be refreshed. It is done running
% \i refresh_materialized_views.sql


DESCRIPTIVE ANALYSIS

For this stage there are two options:

Make the whole connection and do the graphs or use the exported Tableau file that we created for simplicity:

Option 1:

In this stage, it is necessary to connect PostgreSQL and Tableau. For that open Tableau Desktop and select Connect/To a Server/PostgreSQL.
Then add the following parameters:
Server: 127.0.0.1
Port: 5432 (unless PostgreSQL port is defined differently in your system)
Database: dataimporta
Authentication: Username and Password
Username: <Your PostgreSQL username>
Password: <Your PostgreSQL password>

Now the data is available and it's a matter to drag and drop items to show the graphs.

Option 2: 

For simplicity, we provide a Tableau Packaged Workbook file named "descriptive_analysis.twbx" that is ready to use. It contains an interactive dashboard with all the graphs that we
want to show and the data from the respective sandbox is already packed inside, so there is no need to establish a connection to PostgreSQL.



MACHINE LEARNING MODEL

Instal packages in R with:
install.packages('remotes')
install.packages('RPostgres')
install.packages("sparklyr")


To train the model, from command line launch:

% Rscript --default-packages=DBI,RPostgres,RPostgreSQL,dplyr,sparklyr train_model_transp_price.R

To do forecasts:

% Rscript --default-packages=sparklyr,RPostgres forecasts_model_transp_price.R path_to_model country mean_of_transport custom net_price net_price_unit     